A very classy 3-floor restaurant has opened in the city. The owner wants to have restaurant management software that will help him and the managers run the restaurant end to end.
Help them by implementing the database structure, optimizing his system and making analysis for the future management strategy of the restaurant.	

The restaurant_db Database needs to hold information about orders, products, clients, waiters and tables.
Your task is to create a database called restaurant_db. Then you will have to create several tables.
•	products – contains information about the products.
•	clients – contains information about the clients.
•	tables – contains information about the tables.
•	waiters – contains information about the waiters.
•	orders – contains information about the orders.
o	Each order has a table, waiter and clients. 
•	orders_products – a many to many mapping table between the orders and the products.
•	orders_clients – a many to many mapping table between the orders and the clients.
CREATE TABLE products(
id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(30) UNIQUE,
type VARCHAR(30),
price DECIMAL(10,2)
);

CREATE TABLE clients(
id INT PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(50),
last_name VARCHAR(50),
birthdate DATE,
card VARCHAR(50),
review TEXT
);

CREATE TABLE tables(
id INT PRIMARY KEY AUTO_INCREMENT,
floor INT,
reserved BOOLEAN,
capacity INT
);

CREATE TABLE waiters(
id INT PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(50),
last_name VARCHAR(50),
email VARCHAR(50),
phone VARCHAR(50),
salary DECIMAL(10,2)
);

CREATE TABLE orders(
id INT PRIMARY KEY AUTO_INCREMENT,
table_id INT,
waiter_id INT,
order_time TIME,
payed_status BOOLEAN,
FOREIGN KEY(table_id) REFERENCES tables(id),
FOREIGN KEY(waiter_id) REFERENCES waiters(id)
);

CREATE TABLE orders_clients(
order_id INT,
client_id INT,
FOREIGN KEY(order_id) REFERENCES orders(id),
FOREIGN KEY(client_id) REFERENCES clients(id)
);

CREATE TABLE orders_products(
order_id INT,
product_id INT,
FOREIGN KEY(order_id) REFERENCES orders(id),
FOREIGN KEY(product_id) REFERENCES products(id)
);

02.	Insert
You will have to insert records of data into the products table, based on the waiters table.
For waiters with id greater than 6, insert data in the products table with the following values:
•	name – set it to the last name of the waiter followed by white space and then "specialty". 
-	(last_name + " " + "specialty")
•	type – set it to the "Cocktail".
•	price – set it to 1% of the waiter's salary and round the DECIMAL always to the next largest number.

INSERT INTO products (name,type, price )
SELECT
CONCAT(last_name,' ', 'specialty') AS 'name',
 'Cocktail',
CEIL(salary * 0.01)
FROM waiters 
WHERE id>6;

03.	Update
Somebody made a mistake with the orders and you should correct it. Find the orders with id from 12(inclusive) to 23(inclusive) and lower their tables id with 1.
 - e.g. table_id 40 -> table_id 39

UPDATE orders
SET table_id = table_id -1
WHERE id  BETWEEN 12 AND 23;


04.	Delete
Delete all waiters, who don't have any orders.
DELETE FROM waiters
WHERE id NOT IN (
    SELECT DISTINCT waiter_id
    FROM orders
);

05.	Clients
Extract from the restaurant_db system database, info about the clients.
Order the results by birthdate in descending order and id in descending;
Required Columns
•	id (clients)
•	first_name
•	last_name
•	birthdate
•	card
•	review

SELECT 
id, 
first_name,
last_name,
birthdate,
card,
review
FROM clients
ORDER BY birthdate DESC,id DESC;


06.	Birthdate
Write a query that returns: first_name, last_name, birthdate and review from clients. Filter clients which don't have card and their birthdate is between 1978 and  1993 inclusive.
Show only the first 5 results and order them descending by last_name, then by id ascending.
Required Columns
•	first_name
•	last_name 
•	birthdate
•	review
SELECT
first_name,
last_name ,
birthdate,
review
FROM clients
WHERE card IS NULL AND birthdate BETWEEN '1978-01-01' AND '1993-01-01'
ORDER BY last_name DESC,id ASC
LIMIT 5;

07.	Accounts
The waiters need to have access to the new software, so they need personal accounts. Your task is to generate their usernames and passwords.
Write a query that returns: the username and password for all waiters who are not fired (a fired waiter is a waiter without salary). The username is generated by their last name immediately followed by their first name followed by the number of characters from first name and at the end "Restaurant". The password is their email starting from the 2nd character to the 13th character and then reversed.
Order by password in descending order.
Required Columns
•	username (last_name + first_name + characters count from first_name + "Restaurant")
•	password (starting from the 2nd character to the 13th character of their email and then reversed) 


SELECT 
    CONCAT(last_name, first_name, CHAR_LENGTH(first_name), 'Restaurant') AS username,
    REVERSE(SUBSTRING(email, 2, 12)) AS password
FROM 
    waiters
WHERE 
    salary IS NOT NULL
ORDER BY 
    password DESC;


08.	Top from menu
There are many items on our menu list, but the owner wants to know which one is the best sellable item from the restaurant.
Extract from the database the id (product), the name and the count of products from all orders with this name where the count is greater or equal to 5.
Order the results descending by count and then by name in ascending.
Required Columns
•	id (product)
•	name (product)
•	count (the count of products with the same name) 

SELECT p.id AS product_id, 
p.name AS product_name, 
COUNT(op.product_id) AS count
FROM products p
JOIN orders_products op ON p.id = op.product_id
JOIN orders o ON op.order_id = o.id
GROUP BY p.id, p.name
HAVING COUNT(op.product_id) >= 5
ORDER BY count DESC, p.name ASC;

09.	Availability
There are a lot of people waiting to have dinner in the restaurant. You can help the waiters by checking the available tables in restaurant_db.
Write a query that returns the table_id, capacity, count_clients  and availability of all tables from the 1st floor. Count_clients is the number of people from all orders that are sitting on that table. Availability is based on how many people are sitting and the capacity of the table. If the capacity is greater than count_clients then it should be "Free seats", if the capacity is equal to the count_clients it should be "Full", and if the capacity is lower than the count_clients it should be "Extra seats".
Order the results descending by table_id. 
Required Columns
•	table_id
•	capacity
•	count_clients (is the number of people from all orders that are sitting on that table)
•	availability (based on how many people are sitting and the capacity of the table)


SELECT
t.id AS 'table_id',
t.capacity,
COUNT(oc.client_id) AS 'count_clients',
CASE 
WHEN t.capacity > COUNT(oc.client_id) THEN 'Free seats'
WHEN t.capacity = COUNT(oc.client_id) THEN 'Full'
WHEN t.capacity <COUNT(oc.client_id) THEN 'Extra seats'
END AS 'availability '
FROM tables AS t
JOIN orders AS o ON t.id=o.table_id
JOIN orders_clients AS oc ON o.id=oc.order_id
JOIN clients AS c ON oc.client_id=c.id
WHERE 
    t.floor = 1
GROUP BY 
    t.id, t.capacity
ORDER BY 
    t.id DESC;

10.	Extract bill
Create a user defined function with the name udf_client_bill(full_name VARCHAR(50)) that receives a customer's full name and returns the total price of products he ordered;
Required Columns
•	first_name (client)
•	last_name (client)
•	bill (udf_client_bill) (should be DECIMAL(19,2))

CREATE FUNCTION udf_client_bill(full_name VARCHAR(50)) 
RETURNS DECIMAL(19,2)
DETERMINISTIC
BEGIN
    DECLARE total_bill DECIMAL(19,2);
    
    SELECT SUM(p.price) INTO total_bill
    FROM clients c
    JOIN orders_clients oc ON c.id = oc.client_id
    JOIN orders o ON oc.order_id = o.id
    JOIN orders_products op ON o.id = op.order_id
    JOIN products p ON op.product_id = p.id
    WHERE CONCAT(c.first_name, ' ', c.last_name) = full_name;

    RETURN total_bill;
END

11.	Happy hour
Create a stored procedure udp_happy_hour which accepts the following parameters:
•	type (VARCHAR(50))
Extracts data about the products from the given type and reduces the prices by 20% of all products which have prices higher or equal to 10.00 and are from the given type.


CREATE PROCEDURE udp_happy_hour (IN p_type VARCHAR(50))
BEGIN
    UPDATE products
    SET price = price * 0.8 -- reduce price by 20%
    WHERE type = p_type
    AND price >= 10.00;
END
